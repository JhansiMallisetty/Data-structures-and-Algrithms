1)

package main
 
import (
    "fmt"
    "math/rand"
    "time"
)
 
func main() {
 
    slice := generateSlice(20)
    fmt.Println("\n--- Unsorted --- \n\n", slice)
    fmt.Println("\n--- Sorted ---\n\n", mergeSort(slice))
}
 

func generateSlice(size int) []int {
 
    slice := make([]int, size, size)
    rand.Seed(time.Now().UnixNano())
    for i := 0; i < size; i++ {
        slice[i] = rand.Intn(10) - rand.Intn(10)
    }
    return slice
}
  
func mergeSort(items []int) []int {
    var num = len(items)
      
    if num == 1 {
        return items
    }
      
    middle := int(num / 2)
    var (
        left = make([]int, middle)
        right = make([]int, num-middle)
    )
    for i := 0; i < num; i++ {
        if i < middle {
            left[i] = items[i]
        } else {
            right[i-middle] = items[i]
        }
    }
      
    return merge(mergeSort(left), mergeSort(right))
}
  
func merge(left, right []int) (result []int) {
    result = make([]int, len(left) + len(right))
      
    i := 0
    for len(left) > 0 && len(right) > 0 {
        if left[0] < right[0] {
            result[i] = left[0]
            left = left[1:]
        } else {
            result[i] = right[0]
            right = right[1:]
        }
        i++
    }
      
    for j := 0; j < len(left); j++ {
        result[i] = left[j]
        i++
    }
    for j := 0; j < len(right); j++ {
        result[i] = right[j]
        i++
    }
      
    return
}

--- Unsorted --- 

 [-8 5 -6 -3 4 -3 4 0 -4 0 -2 -8 -2 5 -7 0 -1 0 -3 -2]

--- Sorted ---

 [-8 -8 -7 -6 -4 -3 -3 -3 -2 -2 -2 -1 0 0 0 0 4 4 5 5]

Program exited.


2)

package main
import (
    "fmt"
)
func merge(a, b []int) []int {
  size, i, j := len(a)+len(b), 0, 0
  result := make([]int, size)
  for k := 0; k < size; k++ {
    switch true {
      case i == len(a):
          
          result[k] = b[j]
          j += 1
      case j == len(b):
         
         result[k] = a[i]
         i += 1
      case a[i] > b[j]:
         result[k] = b[j]
         
         j += 1
      case a[i] < b[j]:
         
          result[k] = a[i]
          i += 1
      case a[i] == b[j]:
          
          result[k] = b[j]
          j += 1
                  }
      }
   return result
  }
func MergeSort(numbers []int) []int {
    if len(numbers) < 2 {
       return numbers
     }
    middle := int(len(numbers) / 2)
  return merge(MergeSort(numbers[middle:]), MergeSort(numbers[:middle]))
}
func main() {
 a := []int{2,5,6,22,35,1,6,8,4,6,2,8,0,5,33,55,28}
 fmt.Println(MergeSort(a))
}


[0 1 2 2 4 5 5 6 6 6 8 8 22 28 33 35 55]

Program exited.

3)

package main

import (
	"fmt"
)

func Merge(l, r []int) []int {
	ret := make([]int, 0, len(l)+len(r))
	for len(l) > 0 || len(r) > 0 {
		if len(l) == 0 {
			return append(ret, r...)
		}
		if len(r) == 0 {
			return append(ret, l...)
		}
		if l[0] <= r[0] {
			ret = append(ret, l[0])
			l = l[1:]
		} else {
			ret = append(ret, r[0])
			r = r[1:]
		}
	}
	return ret
}

func MergeSort(s []int) []int {
	if len(s) <= 1 {
		return s
	}
	n := len(s) / 2
	l := MergeSort(s[:n])
	r := MergeSort(s[n:])
	return Merge(l, r)
}

func main() {
	s := []int{9, 4, 3, 6, 1, 2, 10, 5, 7, 8}
	fmt.Printf("%v\n%v\n", s, MergeSort(s))
}


[9 4 3 6 1 2 10 5 7 8]
[1 2 3 4 5 6 7 8 9 10]

Program exited.

4)

package main

import (
    "fmt"
)

func main() {
    A := []int{3, 5, 1, 6, 1, 7, 2, 4, 5}
    fmt.Println(sort(A))
}


func sort(A []int) []int {
    if len(A) <= 1 {
        return A
    }

    left, right := split(A)
    left = sort(left)
    right = sort(right)
    return merge(left, right)
}


func split(A []int) ([]int, []int) {
    return A[0:len(A) / 2], A[len(A) / 2:]
}


func merge(A, B []int) []int {
    arr := make([]int, len(A) + len(B))

    
    j, k := 0, 0

    for i := 0; i < len(arr); i++ {
        
        if j >= len(A) {
            arr[i] = B[k]
            k++
            continue
        } else if k >= len(B) {
            arr[i] = A[j]
            j++
            continue
        }
        
        if A[j] > B[k] {
            arr[i] = B[k]
            k++
        } else {
            arr[i] = A[j]
            j++
        }
    }

    return arr
}

[1 1 2 3 4 5 5 6 7]

Program exited.

5)


package main

import "fmt"

func Merge(ldata []int, rdata []int) (result []int) {
    result = make([]int, len(ldata) + len(rdata))
    lidx, ridx := 0, 0

    for i:=0;i<cap(result);i++ {
        switch {
            case lidx >= len(ldata):
                result[i] = rdata[ridx]
                ridx++
            case ridx >= len(rdata):
                result[i] = ldata[lidx]
                lidx++
            case ldata[lidx] < rdata[ridx]:
                result[i] = ldata[lidx]
                lidx++
            default:
                result[i] = rdata[ridx]
                ridx++
        }
    }

    return
}

func MergeSort(data []int, r chan []int) {
    if len(data) == 1 {
        r <- data
        return
    }

    leftChan := make(chan []int)
    rightChan := make(chan []int)
    middle := len(data)/2

    go MergeSort(data[:middle], leftChan)
    go MergeSort(data[middle:], rightChan)

    ldata := <-leftChan
    rdata := <-rightChan

    close(leftChan)
    close(rightChan)
    r <- Merge(ldata, rdata)
    return
}

func main() {
    s := []int{100, 200, 300,  400, 500, 600, 700, 800, 900, 1000 }

    result := make(chan []int)
    go MergeSort(s, result)

    r := <- result
    for _,v := range r {
        fmt.Println(v)
    }
    close(result)
}

100
200
300
400
500
600
700
800
900
1000

Program exited.

6)

package main

import (
    "fmt"
)

func main() {
    A := []int{3, 5, 1, 6, 1, 7, 2, 4, 5}
    fmt.Println(sort(A))
}


func sort(A []int) []int {
    if len(A) <= 1 {
        return A
    }

    left, right := split(A)
    left = sort(left)
    right = sort(right)
    return merge(left, right)
}


func split(A []int) ([]int, []int) {
    return A[0:len(A) / 2], A[len(A) / 2:]
}


func merge(A, B []int) []int {
    arr := make([]int, len(A) + len(B))

    
    j, k := 0, 0

    for i := 0; i < len(arr); i++ {
        
        if j >= len(A) {
            arr[i] = B[k]
            k++
            continue
        } else if k >= len(B) {
            arr[i] = A[j]
            j++
            continue
        }
        
        if A[j] > B[k] {
            arr[i] = B[k]
            k++
        } else {
            arr[i] = A[j]
            j++
        }
    }

    return arr
}

[1 1 2 3 4 5 5 6 7]

Program exited.